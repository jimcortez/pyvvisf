name: Build wheels

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Initialize submodules
      shell: bash
      run: |
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "Git submodule status:"
        git submodule status
        echo "Initializing submodules..."
        git submodule update --init --recursive
        echo "After submodule initialization:"
        ls -la
        if [ -d "external" ]; then
          echo "External directory contents:"
          ls -la external/
        else
          echo "ERROR: external/ directory not found after submodule initialization"
          exit 1
        fi

    - name: Build VVISF libraries
      shell: bash
      run: |
        echo "Building VVISF libraries..."
        echo "Current directory: $(pwd)"
        echo "Checking VVISF-GL submodule..."
        ls -la external/VVISF-GL/
        echo "Checking for required dependencies..."
        which gcc || echo "gcc not found"
        which g++ || echo "g++ not found"
        which make || echo "make not found"
        echo "Installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libglfw3-dev libglew-dev
        echo "Making build script executable..."
        chmod +x scripts/build_vvisf.sh
        echo "Running build script..."
        ./scripts/build_vvisf.sh
        echo "VVISF libraries built successfully"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run tests
      run: |
        pytest tests/ -v

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Initialize submodules (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "Git submodule status:"
        git submodule status
        echo "Initializing submodules..."
        git submodule update --init --recursive
        echo "After submodule initialization:"
        ls -la
        if [ -d "external" ]; then
          echo "External directory contents:"
          ls -la external/
        else
          echo "ERROR: external/ directory not found after submodule initialization"
          exit 1
        fi

    - name: Initialize submodules (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Repository contents:"
        Get-ChildItem -Force
        Write-Host "Git submodule status:"
        git submodule status
        Write-Host "Initializing submodules..."
        git submodule update --init --recursive
        Write-Host "After submodule initialization:"
        Get-ChildItem -Force
        if (Test-Path "external") {
          Write-Host "External directory contents:"
          Get-ChildItem -Force external/
        } else {
          Write-Host "ERROR: external/ directory not found after submodule initialization"
          exit 1
        }

    - name: Build VVISF libraries (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "Building VVISF libraries on Linux..."
        echo "Current directory: $(pwd)"
        echo "Checking VVISF-GL submodule..."
        ls -la external/VVISF-GL/
        echo "Checking for required dependencies..."
        which gcc || echo "gcc not found"
        which g++ || echo "g++ not found"
        which make || echo "make not found"
        echo "Installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libglfw3-dev libglew-dev
        echo "Making build script executable..."
        chmod +x scripts/build_vvisf.sh
        echo "Running build script..."
        ./scripts/build_vvisf.sh
        echo "VVISF libraries built successfully"

    - name: Build VVISF libraries (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "Building VVISF libraries on macOS..."
        echo "Current directory: $(pwd)"
        echo "Checking VVISF-GL submodule..."
        ls -la external/VVISF-GL/
        echo "Checking for required dependencies..."
        which gcc || echo "gcc not found"
        which g++ || echo "g++ not found"
        which make || echo "make not found"
        echo "Installing system dependencies..."
        brew install cmake glfw glew
        echo "Making build script executable..."
        chmod +x scripts/build_vvisf.sh
        echo "Running build script..."
        ./scripts/build_vvisf.sh
        echo "VVISF libraries built successfully"

    - name: Build VVISF libraries (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Building VVISF libraries on Windows..."
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Checking VVISF-GL submodule..."
        Get-ChildItem -Force external/VVISF-GL/
        Write-Host "Checking for required dependencies..."
        try { Get-Command msbuild -ErrorAction Stop } catch { Write-Host "MSBuild not found" }
        Write-Host "VVISF libraries will be built by cibuildwheel dependency installation script"

    - name: Build wheels
      uses: pypa/cibuildwheel@v3.0.0
      env:
        CIBW_BEFORE_ALL: scripts/install_dependencies.sh
        CIBW_ENVIRONMENT: VVISF_BUILD_TYPE=wheel
        CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
        CIBW_SKIP: "*-musllinux*"
        CIBW_ARCHS: "auto"
        # Architecture-specific settings
        CIBW_MACOS_ARCHS: "x86_64 arm64 universal2"
        CIBW_LINUX_ARCHS: "x86_64 aarch64"
        CIBW_WINDOWS_ARCHS: "x64"
      with:
        package-dir: .
        output-dir: wheelhouse

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: wheelhouse/

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build source distribution
      run: python -m build --sdist

    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload-to-pypi:
    name: Upload to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: wheelhouse/ 